Daily Log Template:
---
Date: [Today's Date]
Time Spent: [e.g., 60 mins]
Topic: [e.g., Python Variables & Data Types]
Code Files: [e.g., day1_part2.py]
Notes/Struggles:
- [A quick note about what you did, learned, or found difficult.]
- [e.g., "The f-string was much cleaner than using the + sign."]
- [e.g., "It was easy to remember that lists use [] because I think of them like rungs on a ladder."]
Next Step:
- [What is the very next thing you need to do? E.g., "Study conditional logic."]
---


[2025-08-19 20:30]  
- Learned GitHub integration is built into VS Code (no extension required)  
- Cloned repository from GitHub to local machine  
- Created first Python script `helloworld.py` with test print statement  
- Verified file appears in repo folder alongside README and .gitignore  
- Did not push changes yet (saved for next session)  
- Next step: Push new file to GitHub and practice log entry process

Date: 2025-08-20
Session Duration:  60 mins
Focus: Push my first GitHub and practice basic Python
Activities:
- Pushed my folder to online GitHub
- Created simply lesson2 basic Python
Challenges:
- The example to push wasnt very clear so I clicked around and figured it out myself.
- Keep running out of time on chatGPT
Solutions / Notes:
- Used Gemini to fill in the blanks for chatGPT
Next Steps:
- Continue with chatGPT lesson plan but migrate a lot of those activities to Gemini

Date: [2025-08-20]
Time Spent: [Too Long]
Topic: [Python Variables & Data Types]
Code Files: [day2_variables.py]
Notes/Struggles:
- [Review the types and added/altered and observed the changes]
- [The f-string was much cleaner than using the + sign."]
- ["It was easy to remember that lists use [] because I think of them like rungs on a ladder."]
Next Step:
- ["Study conditional logic."]

Date: 08/21/2025
Time Spent: 60 mins
Topic: Python Control Flow (if/elif/else) & Boolean Operators
Code Files: day3_control_flow.py
Notes/Struggles:
The concept of control flow was very intuitive, and I found the logic to be similar to PLC programming.
I had extra time to move on to boolean operators (and, or, not) and nested if statements.
No challenging events or struggles today.
Next Step:
The next lesson will be on loops (for and while).

Date: 08/22/2025
Time Spent: 30 mins
Topic: Python Loops (for & while)
Code Files: day4_loops.py
Notes/Struggles:
I understood the concept of loops easily, likely due to my background in PLC programming and reviewing the lesson during breaks at work.

The f-string syntax for printing within the loop is still new to me. While VS Code's prompts are helpful, I need to practice writing these manually to build the muscle memory.
Next Step:
The next lesson will focus on functions and modules.

Date: 08/23/2025
Time Spent: 60 minutes
Topic: Python Functions & Modules
Code Files: day5_functions_modules.py
Notes/Struggles:
I found the concepts of functions and modules intuitive, but I realized I need more practice with the f-string syntax. I went back and corrected my code to use them properly.

I also failed to include comments in my code. I will make this a priority going forward to improve readability.
Next Step:
I will be working on the bonus lesson to generate a data file for next week's SQL lessons.

Date: August 24, 2025
Time Spent: 60 mins
Topic: SQL Setup & First Queries
Code Files: day6_creating_SQL.py, day6_first_query.py, day6_creating_SQL_executemany.py
Notes/Struggles:

Encountered several debugging challenges when trying to populate the database from the text file.

The most significant struggle was a bug that caused the script to only insert the last entry of the data file, which led to a deeper understanding of how data is committed to the database.

Corrected a table structure issue and learned the importance of matching SQL commands to the specific data format.

Ultimately, we learned a more reliable and efficient method for bulk data insertion using cursor.executemany().
Next Step:

Explore both the execute() and executemany() methods in detail to fully understand their differences, benefits, and drawbacks.

Date: August 26, 2025
Time Spent: ~2 hours
Topic: Advanced SQL Queries & Database Concepts
Code Files: day8_sql_where.py, day8_sql_orderby.py, day8_inspect_schema.py, day8_count_records.py, day8_calculate_average.py, day8_calculate_sum.py
Notes/Struggles:
Mastered using the WHERE and ORDER BY clauses to filter and sort data.
Learned to use SQL aggregation functions (COUNT(), AVG(), SUM()) to summarize data and used Python's fetchone() method for single results.
Gained a clear understanding of the difference between execute() and executemany(), and the specific use cases for each.
Clarified the difference between Python functions and methods and the use of brackets [] for indexing tuples and lists.
Learned how to inspect a database schema using the PRAGMA table_info() command.
Next Step:
Continue with SQL lessons, likely focusing on more advanced concepts like GROUP BY and JOIN to perform deeper analysis.

Date: August 27, 2025
Time Spent: ~1 hour
Topic: SQL GROUP BY & HAVING Clauses
Code Files: day9_group_by.py, day9_having.py, day9_complex_query.py
Notes/Struggles:
Learned the purpose of GROUP BY and HAVING clauses and their key difference from the WHERE clause.
Discovered that our simple database was too flat to demonstrate the full power of these clauses, leading to a discussion on data modeling.
Identified the need for a more robust database with multiple tags to fully test queries.
Learned the official names for the parts of a SQL query (e.g., SELECT as projection, FROM as source).
Next Step:
Build a new, relational database with two tables to store tags and readings. We will include a column with a unique, auto-incrementing id as best practice.


Date: August 28, 2025
Time Spent: ~60 minutes
Topic: Relational Database Creation, Schema Inspection & Debugging
Code Files: day10_create_relational_db.py, day10_inspect_schema.py, day10_sqlite_master_query.py
Notes/Struggles:
Successfully created a multi-table relational database with foreign keys, modeling a real-world PLC tag structure.
Learned how to inspect an unknown database's tables by querying the built-in sqlite_master table.
Debugged a TypeError by learning to handle None values gracefully, a key skill for writing robust code.
Understood how the PRAGMA table_info() command provides a fixed, predictable output, which is different from a standard SELECT query.
Next Step:
Our next lesson will be our first practical lesson on the JOIN clause to combine data from our new tables.

Date: September 1, 2025
Time Spent: ~2 hours
Topic: SQL JOIN Queries & Debugging
Code Files: day11_simple_join.py, day11_join_all_tables.py, day11_practice_problems.py
Notes/Struggles:
Mastered the JOIN clause to combine data from multiple tables, successfully replicating a real-world tag hierarchy.
Debugged and solved complex syntax errors related to SQL clause order (WHERE, GROUP BY, HAVING) and logical operators (AND, OR).
Gained a clear understanding of the IN operator as a cleaner alternative to multiple OR statements.
Solidified the skill of combining multiple clauses in a single query to perform specific, practical analysis.
Next Step:
We will return to our Python conversation for our next lesson, continuing with Python-specific topics.

Date: 09/01/2025
Time Spent: 60 mins
Topic: Introduction to NumPy
Code Files: day11_numpy.py
Notes/Struggles:

I successfully installed NumPy and created a virtual environment. The terminal messages helped me understand why a virtual environment is a critical best practice for managing project dependencies.

I wrote a comparison script that clearly demonstrated the performance difference between a standard Python list and a NumPy array.
A key learning was that NumPy arrays are homogeneous (one data type), which is why they don't use commas in the terminal output and are much faster for numerical calculations.
Next Step:
Tomorrow, we will begin our lesson on the Pandas library, focusing on the DataFrame data structure.

Date: 09/02/2025
Time Spent: 60 mins
Topic: The Pandas DataFrame
Code Files: day12_pandas.py
Notes/Struggles:
I successfully installed Pandas into my virtual environment after troubleshooting a ModuleNotFoundError. This reinforced the importance of managing project dependencies.
I was able to load my CSV data into a Pandas DataFrame and display it in the terminal.
I discovered several useful methods like .std(), .mean(), .head(), .tail(), .max(), and .min() on my own. I understand that .mean() is the correct statistical term for "average."
Next Step:
Tomorrow, we will learn how to select and manipulate specific columns and rows in a Pandas DataFrame.

Date: 09/03/2025
Time Spent: 60 mins
Topic: Pandas DataFrame - Data Cleaning & Conversion
Code Files: day13_pandas.py
Notes/Struggles:
I successfully completed the tasks for Day 13, including selecting columns, filtering rows, and creating a new calculated column.
I had a great discussion on real-world data issues like missing data and flatlining sensors. I learned that Pandas has methods like .dropna() and .fillna() for these tasks, which are fundamental to a data engineer's work.
We also discussed how Pandas can handle various data types beyond CSV, and how Python is used for data conversion in the ETL process.
Next Step:
Tomorrow, we will learn more about advanced data filtering and manipulation with Pandas, including using boolean logic to filter data.

Date: 09/04/2025
Time Spent: 2 hours
Topic: Two-Week Review & Quiz
Code Files: quiz_day14.py
Notes/Struggles:
I successfully completed all three challenges of the two-week review, combining lists, dictionaries, loops, conditional logic, and Pandas methods.
I encountered the SettingWithCopyWarning and learned the importance of using .copy() and .loc to modify DataFrames, ensuring a robust and predictable workflow.
I discovered that Pandas implicitly imports NumPy, but I've committed to explicitly importing all libraries for better code clarity and reproducibility.
My curiosity led to learning about a key best practice for data integrity.
Next Step:
We will begin a new lesson on data aggregation and grouping, which is a fundamental skill for generating reports and summaries from data.

Date: 09/06/2025
Time Spent: 60 mins
Topic: Data Aggregation & Grouping
Code Files: day15_aggregation.py
Notes/Struggles:
This was my first time using .groupby() and .agg() in Python. I had to look up the methods, but I understood the concepts from my SQL lessons, which helped a lot.
I learned why using hardcoded data is a good practice for testing and ensuring my code's logic is sound.
We had a great discussion about when a Data Engineer should use SQL on the server versus Pandas in memory, which helped clarify the workflow for my future career path.
Next Step:
Tomorrow, we will continue with data aggregation by learning how to apply it to more complex, real-world data scenarios from my historian.

Date: 09/06/2025
Time Spent: 30 mins
Topic: Advanced Grouping & Custom Aggregation
Code Files: day16_advanced_aggregation.py
Notes/Struggles:
This was a challenging lesson. I struggled with passing a custom function to .agg(), but through troubleshooting, I realized that .agg() operates on a group (a Series) of data, not a single value.
This was a huge "aha!" moment, and it gave me a deeper understanding of the "Split-Apply-Combine" workflow.
I believe this lesson was valuable because the struggle helped solidify the concept, and the professional solution of using a custom function is a powerful skill.
Next Step:
We will continue our lessons on advanced data manipulation, applying these new skills to more complex problems.

Date: 09/08/2025
Time Spent: 3 hours (Combined for Day 17 & Day 18)
Topic: Merging & Data Cleaning with Pandas
Code Files: day17_merging.py, day18_data_cleaning.py
Notes/Struggles:
I successfully completed two full lessons today. I learned how to combine two different DataFrames using the .merge() method, exploring all four types of joins (inner, left, outer, right).
I also mastered key data cleaning skills, including handling missing values with .fillna() and .dropna() and converting Unix timestamps into a human-readable format with pd.to_datetime().
The most important lesson was resolving the SettingWithCopyWarning. I now understand the difference between a "view" and a "copy" in Pandas and will use .loc to ensure my data pipelines are robust and predictable.
Next Step:
We will continue our journey with Pandas by focusing on advanced data manipulation.

Date: 09/09/2025
Time Spent: 60 mins
Topic: Advanced Data Transformation
Code Files: day19_advanced_transformation.py
Notes/Struggles:
I successfully used np.where() to create conditional columns, a powerful and efficient alternative to a for loop.
I practiced several new methods for data transformation, including .rename(), column reordering, .str.upper(), and using a custom function with .apply().
I had to look up the new methods, but it reinforced that the programmer's job is to know the right question to ask, not to memorize every function. I am confident in my ability to find and implement these solutions.
Next Step:
We will conclude our Pandas lessons by learning how to handle different time zones, which is a key skill for working with time-series data.

place holder for next