Daily Log Template:
---
Date: [Today's Date]
Time Spent: [e.g., 60 mins]
Topic: [e.g., Python Variables & Data Types]
Code Files: [e.g., day1_part2.py]
Notes/Struggles:
- [A quick note about what you did, learned, or found difficult.]
- [e.g., "The f-string was much cleaner than using the + sign."]
- [e.g., "It was easy to remember that lists use [] because I think of them like rungs on a ladder."]
Next Step:
- [What is the very next thing you need to do? E.g., "Study conditional logic."]
---


[2025-08-19 20:30]  
- Learned GitHub integration is built into VS Code (no extension required)  
- Cloned repository from GitHub to local machine  
- Created first Python script `helloworld.py` with test print statement  
- Verified file appears in repo folder alongside README and .gitignore  
- Did not push changes yet (saved for next session)  
- Next step: Push new file to GitHub and practice log entry process

Date: 2025-08-20
Session Duration:  60 mins
Focus: Push my first GitHub and practice basic Python
Activities:
- Pushed my folder to online GitHub
- Created simply lesson2 basic Python
Challenges:
- The example to push wasnt very clear so I clicked around and figured it out myself.
- Keep running out of time on chatGPT
Solutions / Notes:
- Used Gemini to fill in the blanks for chatGPT
Next Steps:
- Continue with chatGPT lesson plan but migrate a lot of those activities to Gemini

Date: [2025-08-20]
Time Spent: [Too Long]
Topic: [Python Variables & Data Types]
Code Files: [day2_variables.py]
Notes/Struggles:
- [Review the types and added/altered and observed the changes]
- [The f-string was much cleaner than using the + sign."]
- ["It was easy to remember that lists use [] because I think of them like rungs on a ladder."]
Next Step:
- ["Study conditional logic."]

Date: 08/21/2025
Time Spent: 60 mins
Topic: Python Control Flow (if/elif/else) & Boolean Operators
Code Files: day3_control_flow.py
Notes/Struggles:
The concept of control flow was very intuitive, and I found the logic to be similar to PLC programming.
I had extra time to move on to boolean operators (and, or, not) and nested if statements.
No challenging events or struggles today.
Next Step:
The next lesson will be on loops (for and while).

Date: 08/22/2025
Time Spent: 30 mins
Topic: Python Loops (for & while)
Code Files: day4_loops.py
Notes/Struggles:
I understood the concept of loops easily, likely due to my background in PLC programming and reviewing the lesson during breaks at work.

The f-string syntax for printing within the loop is still new to me. While VS Code's prompts are helpful, I need to practice writing these manually to build the muscle memory.
Next Step:
The next lesson will focus on functions and modules.

Date: 08/23/2025
Time Spent: 60 minutes
Topic: Python Functions & Modules
Code Files: day5_functions_modules.py
Notes/Struggles:
I found the concepts of functions and modules intuitive, but I realized I need more practice with the f-string syntax. I went back and corrected my code to use them properly.

I also failed to include comments in my code. I will make this a priority going forward to improve readability.
Next Step:
I will be working on the bonus lesson to generate a data file for next week's SQL lessons.

Date: August 24, 2025
Time Spent: 60 mins
Topic: SQL Setup & First Queries
Code Files: day6_creating_SQL.py, day6_first_query.py, day6_creating_SQL_executemany.py
Notes/Struggles:

Encountered several debugging challenges when trying to populate the database from the text file.

The most significant struggle was a bug that caused the script to only insert the last entry of the data file, which led to a deeper understanding of how data is committed to the database.

Corrected a table structure issue and learned the importance of matching SQL commands to the specific data format.

Ultimately, we learned a more reliable and efficient method for bulk data insertion using cursor.executemany().
Next Step:

Explore both the execute() and executemany() methods in detail to fully understand their differences, benefits, and drawbacks.

Date: August 26, 2025
Time Spent: ~2 hours
Topic: Advanced SQL Queries & Database Concepts
Code Files: day8_sql_where.py, day8_sql_orderby.py, day8_inspect_schema.py, day8_count_records.py, day8_calculate_average.py, day8_calculate_sum.py
Notes/Struggles:
Mastered using the WHERE and ORDER BY clauses to filter and sort data.
Learned to use SQL aggregation functions (COUNT(), AVG(), SUM()) to summarize data and used Python's fetchone() method for single results.
Gained a clear understanding of the difference between execute() and executemany(), and the specific use cases for each.
Clarified the difference between Python functions and methods and the use of brackets [] for indexing tuples and lists.
Learned how to inspect a database schema using the PRAGMA table_info() command.
Next Step:
Continue with SQL lessons, likely focusing on more advanced concepts like GROUP BY and JOIN to perform deeper analysis.

Date: August 27, 2025
Time Spent: ~1 hour
Topic: SQL GROUP BY & HAVING Clauses
Code Files: day9_group_by.py, day9_having.py, day9_complex_query.py
Notes/Struggles:
Learned the purpose of GROUP BY and HAVING clauses and their key difference from the WHERE clause.
Discovered that our simple database was too flat to demonstrate the full power of these clauses, leading to a discussion on data modeling.
Identified the need for a more robust database with multiple tags to fully test queries.
Learned the official names for the parts of a SQL query (e.g., SELECT as projection, FROM as source).
Next Step:
Build a new, relational database with two tables to store tags and readings. We will include a column with a unique, auto-incrementing id as best practice.